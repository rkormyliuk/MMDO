import pandas as pd

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df = pd.read_csv("spotify_top_1000_tracks.csv")

# –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø–µ—Ä—à—ñ —Ä—è–¥–∫–∏
print(df.head())

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–±—ñ—Ä
print(df.info())

from sklearn.model_selection import train_test_split

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–∑–Ω–∞–∫
df['track_name_len'] = df['track_name'].apply(len)
df['artist_name_len'] = df['artist'].apply(len)
df['release_year'] = pd.to_datetime(df['release_date'], format='mixed', errors='coerce').dt.year


# –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞–∫
features = ['duration_min', 'track_name_len', 'artist_name_len', 'release_year']
target = 'popularity'

# –ú–∞—Ç—Ä–∏—Ü—è X —ñ –≤–µ–∫—Ç–æ—Ä y
X = df[features]
y = df[target]

# –ü–æ–¥—ñ–ª –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
lr = LinearRegression()
lr.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
y_pred_lr = lr.predict(X_test)

# –û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ
mae_lr = mean_absolute_error(y_test, y_pred_lr)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
r2_lr = r2_score(y_test, y_pred_lr)

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è (OLS) ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
print(f"MAE: {mae_lr:.2f}")
print(f"RMSE: {rmse_lr:.2f}")
print(f"R¬≤: {r2_lr:.4f}")
print("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏:")
for feat, coef in zip(features, lr.coef_):
    print(f"{feat}: {coef:.4f}")

from sklearn.linear_model import Ridge

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ —Ç—Ä–µ–Ω—É—î–º–æ Ridge-–º–æ–¥–µ–ª—å
ridge = Ridge(alpha=10.0)  # –ú–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ alpha (Œª), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.0, 0.1, 100
ridge.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑
y_pred_ridge = ridge.predict(X_test)

# –û—Ü—ñ–Ω–∫–∞
mae_ridge = mean_absolute_error(y_test, y_pred_ridge)
rmse_ridge = np.sqrt(mean_squared_error(y_test, y_pred_ridge))
r2_ridge = r2_score(y_test, y_pred_ridge)

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("\nRidge-—Ä–µ–≥—Ä–µ—Å—ñ—è (L2) ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
print(f"MAE: {mae_ridge:.2f}")
print(f"RMSE: {rmse_ridge:.2f}")
print(f"R¬≤: {r2_ridge:.4f}")
print("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏:")
for feat, coef in zip(features, ridge.coef_):
    print(f"{feat}: {coef:.4f}")

from sklearn.linear_model import Lasso

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ —Ç—Ä–µ–Ω—É—î–º–æ Lasso-–º–æ–¥–µ–ª—å
lasso = Lasso(alpha=1.0)  # –ú–æ–∂–Ω–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑ alpha: 0.1, 1.0, 10.0
lasso.fit(X_train, y_train)

# –ü—Ä–æ–≥–Ω–æ–∑
y_pred_lasso = lasso.predict(X_test)

# –û—Ü—ñ–Ω–∫–∞
mae_lasso = mean_absolute_error(y_test, y_pred_lasso)
rmse_lasso = np.sqrt(mean_squared_error(y_test, y_pred_lasso))
r2_lasso = r2_score(y_test, y_pred_lasso)

import time

# OLS
start = time.time()
lr.fit(X_train, y_train)
lr_time = time.time() - start
y_pred_lr = lr.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred_lr)

# Ridge
start = time.time()
ridge.fit(X_train, y_train)
ridge_time = time.time() - start
y_pred_ridge = ridge.predict(X_test)
mse_ridge = mean_squared_error(y_test, y_pred_ridge)
ridge_iter = getattr(ridge, 'n_iter_', 'N/A')  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π

# Lasso
start = time.time()
lasso.fit(X_train, y_train)
lasso_time = time.time() - start
y_pred_lasso = lasso.predict(X_test)
mse_lasso = mean_squared_error(y_test, y_pred_lasso)
lasso_iter = getattr(lasso, 'n_iter_', 'N/A')  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("\nLasso-—Ä–µ–≥—Ä–µ—Å—ñ—è (L1) ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
print(f"MAE: {mae_lasso:.2f}")
print(f"RMSE: {rmse_lasso:.2f}")
print(f"R¬≤: {r2_lasso:.4f}")
print("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏:")
for feat, coef in zip(features, lasso.coef_):
    print(f"{feat}: {coef:.4f}")


print("Train set size:", X_train.shape[0])
print("Test set size:", X_test.shape[0])

# –î–ª—è –º–æ–¥–µ–ª—ñ OLS
results_df = pd.DataFrame({
    '–†–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è': y_test,
    '–ü—Ä–æ–≥–Ω–æ–∑ OLS': y_pred_lr,
    '–ü—Ä–æ–≥–Ω–æ–∑ Ridge': y_pred_ridge,
    '–ü—Ä–æ–≥–Ω–æ–∑ Lasso': y_pred_lasso
})

print(results_df.head(10))  # –∞–±–æ –∑–±–µ—Ä–µ–∂–∏ –≤—Å–µ:
results_df.to_csv("results_comparison.csv", index=False)


import matplotlib.pyplot as plt
import seaborn as sns

# OLS ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred_lr, alpha=0.6)
plt.xlabel("–†–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (popularity)")
plt.ylabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
plt.title("–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è (OLS): –ø—Ä–æ–≥–Ω–æ–∑ vs —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å")
plt.grid(True)
plt.show()

# Ridge
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred_ridge, alpha=0.6, color='orange')
plt.xlabel("–†–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (popularity)")
plt.ylabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
plt.title("Ridge-—Ä–µ–≥—Ä–µ—Å—ñ—è: –ø—Ä–æ–≥–Ω–æ–∑ vs —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å")
plt.grid(True)
plt.show()

# Lasso
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred_lasso, alpha=0.6, color='green')
plt.xlabel("–†–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (popularity)")
plt.ylabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
plt.title("Lasso-—Ä–µ–≥—Ä–µ—Å—ñ—è: –ø—Ä–æ–≥–Ω–æ–∑ vs —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å")
plt.grid(True)
plt.show()


import pandas as pd

# –ü–æ–±—É–¥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞–º–∏
coef_df = pd.DataFrame({
    "–û–∑–Ω–∞–∫–∞": features,
    "OLS": lr.coef_,
    "Ridge": ridge.coef_,
    "Lasso": lasso.coef_
})

print("\nüîé –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—É —Ç–∞ –º–µ—Ç—Ä–∏–∫:")
print(f"OLS     ‚Üí –ß–∞—Å: {lr_time:.4f} —Å–µ–∫ | MSE: {mse_lr:.2f}")
print(f"Ridge   ‚Üí –ß–∞—Å: {ridge_time:.4f} —Å–µ–∫ | MSE: {mse_ridge:.2f} | –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {ridge_iter}")
print(f"Lasso   ‚Üí –ß–∞—Å: {lasso_time:.4f} —Å–µ–∫ | MSE: {mse_lasso:.2f} | –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {lasso_iter}")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–∑–Ω–∞–∫—É –≤ —ñ–Ω–¥–µ–∫—Å —ñ –±—É–¥—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
coef_df.set_index("–û–∑–Ω–∞–∫–∞").plot(kind="bar", figsize=(10, 6))
plt.title("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –º–æ–¥–µ–ª–µ–π")
plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞")
plt.grid(True)
plt.tight_layout()
plt.show()


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Ç–∞ –ø–æ—Ö–∏–±–∫–∞–º–∏
results_df = pd.DataFrame({
    '–†–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (popularity)': y_test.values,
    '–ü—Ä–æ–≥–Ω–æ–∑ OLS': y_pred_lr,
    '–ü–æ–º–∏–ª–∫–∞ OLS': abs(y_test.values - y_pred_lr),
    '–ü—Ä–æ–≥–Ω–æ–∑ Ridge': y_pred_ridge,
    '–ü–æ–º–∏–ª–∫–∞ Ridge': abs(y_test.values - y_pred_ridge),
    '–ü—Ä–æ–≥–Ω–æ–∑ Lasso': y_pred_lasso,
    '–ü–æ–º–∏–ª–∫–∞ Lasso': abs(y_test.values - y_pred_lasso)
})

# –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
results_df = results_df.round(2)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É CSV-—Ñ–∞–π–ª
results_df.to_csv("results_comparison.csv", index=False, encoding='utf-8-sig')

print("\n –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª 'results_comparison.csv'")

# –ü–æ–±—É–¥–æ–≤–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º –ø–æ—Ö–∏–±–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
plt.figure(figsize=(10, 6))
sns.histplot(abs(y_test - y_pred_lr), bins=30, color='blue', label='OLS', kde=True)
sns.histplot(abs(y_test - y_pred_ridge), bins=30, color='orange', label='Ridge', kde=True)
sns.histplot(abs(y_test - y_pred_lasso), bins=30, color='green', label='Lasso', kde=True)

plt.title("–†–æ–∑–ø–æ–¥—ñ–ª –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö –ø–æ—Ö–∏–±–æ–∫ (MAE) –¥–ª—è –º–æ–¥–µ–ª–µ–π")
plt.xlabel("–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ (|—Ä–µ–∞–ª—å–Ω–µ ‚àí –ø—Ä–æ–≥–Ω–æ–∑|)")
plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ "–¥–æ–≤–≥–∏–π —Ñ–æ—Ä–º–∞—Ç" (long-form DataFrame)
boxplot_df = pd.DataFrame({
    'OLS': abs(y_test - y_pred_lr),
    'Ridge': abs(y_test - y_pred_ridge),
    'Lasso': abs(y_test - y_pred_lasso)
})

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è Seaborn
boxplot_df_melted = boxplot_df.melt(var_name='–ú–æ–¥–µ–ª—å', value_name='–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞')

# –ü–æ–±—É–¥–æ–≤–∞ boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='–ú–æ–¥–µ–ª—å', y='–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞', hue='–ú–æ–¥–µ–ª—å', data=boxplot_df_melted, palette='Set2', legend=False)
plt.title("Boxplot –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö –ø–æ—Ö–∏–±–æ–∫ –¥–ª—è –º–æ–¥–µ–ª–µ–π")
plt.grid(True)
plt.tight_layout()
plt.show()

metrics_df = pd.DataFrame({
    "–ú–æ–¥–µ–ª—å": ["OLS", "Ridge", "Lasso"],
    "MAE": [mae_lr, mae_ridge, mae_lasso],
    "RMSE": [rmse_lr, rmse_ridge, rmse_lasso],
    "MSE": [mse_lr, mse_ridge, mse_lasso],
    "R¬≤": [r2_lr, r2_ridge, r2_lasso],
    "–ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è (—Å–µ–∫)": [lr_time, ridge_time, lasso_time],
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π": ["N/A", ridge_iter, lasso_iter]
})

metrics_df.to_csv("summary_metrics.csv", index=False, encoding='utf-8-sig')
print("\nüìÑ –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –º–µ—Ç—Ä–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É 'summary_metrics.csv'")
